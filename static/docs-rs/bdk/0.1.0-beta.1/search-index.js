var searchIndex = JSON.parse('{\
"bdk":{"doc":"","i":[[3,"FeeRate","bdk","Fee rate",null,null],[3,"UTXO","","A wallet unspent output",null,null],[12,"outpoint","","",0,null],[12,"txout","","",0,null],[12,"is_internal","","",0,null],[3,"TransactionDetails","","A wallet transaction",null,null],[12,"transaction","","",1,null],[12,"txid","","",1,null],[12,"timestamp","","",1,null],[12,"received","","",1,null],[12,"sent","","",1,null],[12,"fees","","",1,null],[12,"height","","",1,null],[4,"Error","","Errors that can be thrown by the `Wallet`",null,null],[13,"KeyMismatch","","",2,null],[13,"MissingInputUTXO","","",2,null],[13,"InvalidU32Bytes","","",2,null],[13,"Generic","","",2,null],[13,"ScriptDoesntHaveAddressForm","","",2,null],[13,"SendAllMultipleOutputs","","",2,null],[13,"NoAddressees","","",2,null],[13,"OutputBelowDustLimit","","",2,null],[13,"InsufficientFunds","","",2,null],[13,"InvalidAddressNetwork","","",2,null],[13,"UnknownUTXO","","",2,null],[13,"DifferentTransactions","","",2,null],[13,"TransactionNotFound","","",2,null],[13,"TransactionConfirmed","","",2,null],[13,"IrreplaceableTransaction","","",2,null],[13,"FeeRateTooLow","","",2,null],[12,"required","bdk::Error","",3,null],[13,"ChecksumMismatch","bdk","",2,null],[13,"DifferentDescriptorStructure","","",2,null],[13,"SpendingPolicyRequired","","",2,null],[13,"InvalidPolicyPathError","","",2,null],[13,"Signer","","",2,null],[13,"Uncapable","","",2,null],[13,"OfflineClient","","",2,null],[13,"InvalidProgressValue","","",2,null],[13,"ProgressUpdateError","","",2,null],[13,"MissingCachedAddresses","","",2,null],[13,"InvalidOutpoint","","",2,null],[13,"Descriptor","","",2,null],[13,"AddressValidator","","",2,null],[13,"Encode","","",2,null],[13,"Miniscript","","",2,null],[13,"BIP32","","",2,null],[13,"Secp256k1","","",2,null],[13,"JSON","","",2,null],[13,"Hex","","",2,null],[13,"PSBT","","",2,null],[13,"Electrum","","",2,null],[13,"Esplora","","",2,null],[13,"CompactFilters","","",2,null],[13,"Sled","","",2,null],[4,"ScriptType","","Types of script",null,null],[13,"External","","",4,null],[13,"Internal","","",4,null],[0,"blockchain","","Blockchain backends",null,null],[3,"OfflineBlockchain","bdk::blockchain","Type that only implements [`Blockchain`] and is always…",null,null],[3,"NoopProgress","","Type that implements [`Progress`] and drops every update…",null,null],[3,"LogProgress","","Type that implements [`Progress`] and logs at level `INFO`…",null,null],[4,"Capability","","Capabilities that can be supported by a [`Blockchain`]…",null,null],[13,"FullHistory","","Can recover the full history of a wallet and not only the…",5,null],[13,"GetAnyTx","","Can fetch any historical transaction given its txid",5,null],[13,"AccurateFees","","Can compute accurate fees for the transactions found…",5,null],[5,"progress","","Shortcut to create a [`channel`] (pair of [`Sender`] and…",null,[[]]],[5,"noop_progress","","Create a new instance of [`NoopProgress`]",null,[[],["noopprogress",3]]],[5,"log_progress","","Create a nwe instance of [`LogProgress`]",null,[[],["logprogress",3]]],[0,"electrum","","Electrum",null,null],[3,"ElectrumBlockchain","bdk::blockchain::electrum","Wrapper over an Electrum Client that implements the…",null,null],[0,"esplora","bdk::blockchain","Esplora",null,null],[3,"EsploraBlockchain","bdk::blockchain::esplora","Structure that implements the logic to sync with Esplora",null,null],[4,"EsploraError","","Errors that can happen during a sync with…",null,null],[13,"Reqwest","","Error with the HTTP call",6,null],[13,"Parsing","","Invalid number returned",6,null],[13,"BitcoinEncoding","","Invalid Bitcoin data returned",6,null],[13,"TransactionNotFound","","Transaction not found",6,null],[11,"new","","Create a new instance of the client from a base URL",7,[[]]],[0,"compact_filters","bdk::blockchain","Compact Filters",null,null],[3,"Mempool","bdk::blockchain::compact_filters","Container for unconfirmed, but valid Bitcoin transactions",null,null],[3,"Peer","","A Bitcoin peer",null,null],[3,"CompactFiltersBlockchain","","Structure implementing the required blockchain traits",null,null],[4,"CompactFiltersError","","An error that can occur during sync with a…",null,null],[13,"InvalidResponse","","A peer sent an invalid or unexpected response",8,null],[13,"InvalidHeaders","","The headers returned are invalid",8,null],[13,"InvalidFilterHeader","","The compact filter headers returned are invalid",8,null],[13,"InvalidFilter","","The compact filter returned is invalid",8,null],[13,"MissingBlock","","The peer is missing a block in the valid chain",8,null],[13,"DataCorruption","","The data stored in the block filters storage are corrupted",8,null],[13,"NotConnected","","A peer is not connected",8,null],[13,"Timeout","","A peer took too long to reply to one of our messages",8,null],[13,"NoPeers","","No peers have been specified",8,null],[13,"DB","","Internal database error",8,null],[13,"IO","","Internal I/O error",8,null],[13,"BIP158","","Invalid BIP158 filter",8,null],[13,"Time","","Internal system time error",8,null],[13,"Global","","Wrapper for [`crate::error::Error`]",8,null],[11,"add_tx","","Add a transaction to the mempool",9,[[["transaction",3]]]],[11,"get_tx","","Look-up a transaction in the mempool given an…",9,[[["inventory",4]],[["transaction",3],["option",4]]]],[11,"has_tx","","Return whether or not the mempool contains a transaction…",9,[[["txid",3]]]],[11,"iter_txs","","Return the list of transactions contained in the mempool",9,[[],[["vec",3],["transaction",3]]]],[11,"connect","","Connect to a peer over a plaintext TCP connection",10,[[["tosocketaddrs",8],["arc",3],["network",4],["mempool",3]],[["compactfilterserror",4],["result",4]]]],[11,"connect_proxy","","Connect to a peer through a SOCKS5 proxy, optionally by…",10,[[["tosocketaddrs",8],["option",4],["arc",3],["network",4],["mempool",3],["totargetaddr",8]],[["compactfilterserror",4],["result",4]]]],[11,"get_version","","Return the [`VersionMessage`] sent by the peer",10,[[],["versionmessage",3]]],[11,"get_network","","Return the Bitcoin [`Network`] in use",10,[[],["network",4]]],[11,"get_mempool","","Return the mempool used by this peer",10,[[],[["mempool",3],["arc",3]]]],[11,"is_connected","","Return whether or not the peer is still connected",10,[[]]],[11,"send","","Send a raw Bitcoin message to the peer",10,[[["networkmessage",4]],[["result",4],["compactfilterserror",4]]]],[11,"recv","","Waits for a specific incoming Bitcoin message, optionally…",10,[[["duration",3],["option",4]],[["compactfilterserror",4],["result",4],["option",4]]]],[11,"new","","Construct a new instance given a list of peers, a path to…",11,[[["peer",3],["asref",8],["path",3],["option",4],["vec",3]],[["compactfilterserror",4],["result",4]]]],[6,"ProgressData","bdk::blockchain","Data sent with a progress update over a [`channel`]",null,null],[8,"BlockchainMarker","","Marker trait for a blockchain backend",null,null],[8,"Blockchain","","Trait that defines the actions that must be supported by a…",null,null],[10,"get_capabilities","","Return the set of [`Capability`] supported by this backend",12,[[],[["hashset",3],["capability",4]]]],[10,"setup","","Setup the backend and populate the internal database for…",12,[[["progress",8],["option",4]],[["result",4],["error",4]]]],[11,"sync","","Populate the internal database with transactions and UTXOs",12,[[["progress",8],["option",4]],[["result",4],["error",4]]]],[10,"get_tx","","Fetch a transaction from the blockchain given its txid",12,[[["txid",3]],[["error",4],["result",4],["option",4]]]],[10,"broadcast","","Broadcast a transaction",12,[[["transaction",3]],[["result",4],["error",4]]]],[10,"get_height","","Return the current height",12,[[],[["error",4],["result",4]]]],[10,"estimate_fee","","Estimate the fee rate required to confirm a transaction in…",12,[[],[["feerate",3],["result",4],["error",4]]]],[8,"Progress","","Trait for types that can receive and process progress…",null,null],[10,"update","","Send a new progress update",13,[[["string",3],["option",4]],[["result",4],["error",4]]]],[0,"database","bdk","Database types",null,null],[0,"memory","bdk::database","In-memory ephemeral database",null,null],[3,"MemoryDatabase","bdk::database::memory","In-memory ephemeral database",null,null],[11,"new","","Create a new empty database",14,[[]]],[8,"BatchOperations","bdk::database","Trait for operations that can be batched",null,null],[10,"set_script_pubkey","","Store a script_pubkey along with its script type and child…",15,[[["scripttype",4],["script",3]],[["result",4],["error",4]]]],[10,"set_utxo","","Store a [`UTXO`]",15,[[["utxo",3]],[["result",4],["error",4]]]],[10,"set_raw_tx","","Store a raw transaction",15,[[["transaction",3]],[["result",4],["error",4]]]],[10,"set_tx","","Store the metadata of a transaction",15,[[["transactiondetails",3]],[["result",4],["error",4]]]],[10,"set_last_index","","Store the last derivation index for a given script type",15,[[["scripttype",4]],[["result",4],["error",4]]]],[10,"del_script_pubkey_from_path","","Delete a script_pubkey given the script type and its child…",15,[[["scripttype",4]],[["option",4],["error",4],["result",4]]]],[10,"del_path_from_script_pubkey","","Delete the data related to a specific script_pubkey,…",15,[[["script",3]],[["error",4],["result",4],["option",4]]]],[10,"del_utxo","","Delete a [`UTXO`] given its [`OutPoint`]",15,[[["outpoint",3]],[["result",4],["error",4],["option",4]]]],[10,"del_raw_tx","","Delete a raw transaction given its [`Txid`]",15,[[["txid",3]],[["error",4],["result",4],["option",4]]]],[10,"del_tx","","Delete the metadata of a transaction and optionally the…",15,[[["txid",3]],[["result",4],["option",4],["error",4]]]],[10,"del_last_index","","Delete the last derivation index for a script type",15,[[["scripttype",4]],[["result",4],["option",4],["error",4]]]],[8,"Database","","Trait for reading data from a database",null,null],[10,"check_descriptor_checksum","","Read and checks the descriptor checksum for a given script…",16,[[["scripttype",4],["asref",8]],[["result",4],["error",4]]]],[10,"iter_script_pubkeys","","Return the list of script_pubkeys",16,[[["scripttype",4],["option",4]],[["error",4],["vec",3],["result",4]]]],[10,"iter_utxos","","Return the list of [`UTXO`]s",16,[[],[["vec",3],["result",4],["error",4]]]],[10,"iter_raw_txs","","Return the list of raw transactions",16,[[],[["result",4],["vec",3],["error",4]]]],[10,"iter_txs","","Return the list of transactions metadata",16,[[],[["result",4],["vec",3],["error",4]]]],[10,"get_script_pubkey_from_path","","Fetch a script_pubkey given the script type and child number",16,[[["scripttype",4]],[["option",4],["error",4],["result",4]]]],[10,"get_path_from_script_pubkey","","Fetch the script type and child number of a given…",16,[[["script",3]],[["error",4],["result",4],["option",4]]]],[10,"get_utxo","","Fetch a [`UTXO`] given its [`OutPoint`]",16,[[["outpoint",3]],[["result",4],["error",4],["option",4]]]],[10,"get_raw_tx","","Fetch a raw transaction given its [`Txid`]",16,[[["txid",3]],[["error",4],["result",4],["option",4]]]],[10,"get_tx","","Fetch the transaction metadata and optionally also the raw…",16,[[["txid",3]],[["result",4],["option",4],["error",4]]]],[10,"get_last_index","","Return the last defivation index for a script type",16,[[["scripttype",4]],[["result",4],["option",4],["error",4]]]],[10,"increment_last_index","","Increment the last derivation index for a script type and…",16,[[["scripttype",4]],[["error",4],["result",4]]]],[8,"BatchDatabase","","Trait for a database that supports batch operations",null,null],[16,"Batch","","Container for the operations",17,null],[10,"begin_batch","","Create a new batch container",17,[[]]],[10,"commit_batch","","Consume and apply a batch of operations",17,[[],[["result",4],["error",4]]]],[0,"descriptor","bdk","Descriptors",null,null],[4,"Descriptor","bdk::descriptor","Script descriptor",null,null],[13,"Bare","","A raw scriptpubkey (including pay-to-pubkey) under Legacy…",18,null],[13,"Pk","","Pay-to-Pubkey",18,null],[13,"Pkh","","Pay-to-PubKey-Hash",18,null],[13,"Wpkh","","Pay-to-Witness-PubKey-Hash",18,null],[13,"ShWpkh","","Pay-to-Witness-PubKey-Hash inside P2SH",18,null],[13,"Sh","","Pay-to-ScriptHash with Legacy context",18,null],[13,"Wsh","","Pay-to-Witness-ScriptHash with Segwitv0 context",18,null],[13,"ShWsh","","P2SH-P2WSH with Segwitv0 context",18,null],[4,"Legacy","","Legacy ScriptContext",null,null],[3,"Miniscript","","Top-level script AST type",null,null],[12,"node","","A node in the Abstract Syntax Tree(",19,null],[12,"ty","","The correctness and malleability type information for the…",19,null],[12,"ext","","Additional information helpful for extra analysis.",19,null],[8,"MiniscriptKey","","Public key trait which can be converted to Hash type",null,null],[11,"is_uncompressed","","Check if the publicKey is uncompressed. The default…",20,[[]]],[16,"Hash","","The associated Hash type with the publicKey",20,null],[10,"to_pubkeyhash","","Converts an object to PublicHash",20,[[]]],[8,"ScriptContext","","",null,null],[10,"check_frag_non_malleable","","Depending on ScriptContext, fragments can be malleable.…",21,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[10,"check_frag_validity","","Depending on script Context, some of the Terminals might…",21,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[4,"Segwitv0","","Segwitv0 ScriptContext",null,null],[4,"Terminal","","All AST elements",null,null],[13,"True","","`1`",22,null],[13,"False","","`0`",22,null],[13,"PkK","","`<key>`",22,null],[13,"PkH","","`DUP HASH160 <keyhash> EQUALVERIFY`",22,null],[13,"After","","`n CHECKLOCKTIMEVERIFY`",22,null],[13,"Older","","`n CHECKSEQUENCEVERIFY`",22,null],[13,"Sha256","","`SIZE 32 EQUALVERIFY SHA256 <hash> EQUAL`",22,null],[13,"Hash256","","`SIZE 32 EQUALVERIFY HASH256 <hash> EQUAL`",22,null],[13,"Ripemd160","","`SIZE 32 EQUALVERIFY RIPEMD160 <hash> EQUAL`",22,null],[13,"Hash160","","`SIZE 32 EQUALVERIFY HASH160 <hash> EQUAL`",22,null],[13,"Alt","","`TOALTSTACK [E] FROMALTSTACK`",22,null],[13,"Swap","","`SWAP [E1]`",22,null],[13,"Check","","`[Kt]/[Ke] CHECKSIG`",22,null],[13,"DupIf","","`DUP IF [V] ENDIF`",22,null],[13,"Verify","","[T] VERIFY",22,null],[13,"NonZero","","SIZE 0NOTEQUAL IF [Fn] ENDIF",22,null],[13,"ZeroNotEqual","","[X] 0NOTEQUAL",22,null],[13,"AndV","","[V] [T]/[V]/[F]/[Kt]",22,null],[13,"AndB","","[E] [W] BOOLAND",22,null],[13,"AndOr","","[various] NOTIF [various] ELSE [various] ENDIF",22,null],[13,"OrB","","[E] [W] BOOLOR",22,null],[13,"OrD","","[E] IFDUP NOTIF [T]/[E] ENDIF",22,null],[13,"OrC","","[E] NOTIF [V] ENDIF",22,null],[13,"OrI","","IF [various] ELSE [various] ENDIF",22,null],[13,"Thresh","","[E] ([W] ADD)* k EQUAL",22,null],[13,"Multi","","k ()* n CHECKMULTISIG",22,null],[8,"ToPublicKey","","Trait describing public key types which can be converted…",null,null],[10,"to_public_key","","Converts an object to a public key",23,[[],["publickey",3]]],[11,"serialized_len","","Computes the size of a public key when serialized in a…",23,[[]]],[10,"hash_to_hash160","","Converts a hashed version of the public key to a `hash160`…",23,[[],["hash",3]]],[0,"checksum","","Descriptor checksum",null,null],[5,"get_checksum","bdk::descriptor::checksum","Compute the checksum of a descriptor",null,[[],[["error",4],["string",3],["result",4]]]],[0,"error","bdk::descriptor","Descriptor errors",null,null],[4,"Error","bdk::descriptor::error","Errors related to the parsing and usage of descriptors",null,null],[13,"InternalError","","",24,null],[13,"InvalidPrefix","","",24,null],[13,"HardenedDerivationOnXpub","","",24,null],[13,"MalformedInput","","",24,null],[13,"KeyParsingError","","",24,null],[13,"Policy","","",24,null],[13,"InputIndexDoesntExist","","",24,null],[13,"MissingPublicKey","","",24,null],[13,"MissingDetails","","",24,null],[13,"InvalidDescriptorCharacter","","",24,null],[13,"CantDeriveWithMiniscript","","",24,null],[13,"BIP32","","",24,null],[13,"Base58","","",24,null],[13,"PK","","",24,null],[13,"Miniscript","","",24,null],[13,"Hex","","",24,null],[0,"policy","bdk::descriptor","Descriptor policy",null,null],[3,"PKOrF","bdk::descriptor::policy","Raw public key or extended key fingerprint",null,null],[3,"Policy","","Descriptor spending policy",null,null],[12,"id","","Identifier for this policy node",25,null],[12,"item","","Type of this policy node",25,null],[12,"satisfaction","","How a much given PSBT already satisfies this polcy node…",25,null],[12,"contribution","","How the wallet\'s descriptor can satisfy this policy node",25,null],[3,"Condition","","An extra condition that must be satisfied but that is out…",null,null],[12,"csv","","",26,null],[12,"timelock","","",26,null],[4,"SatisfiableItem","","An item that need to be satisfied",null,null],[13,"Signature","","",27,null],[13,"SignatureKey","","",27,null],[13,"SHA256Preimage","","",27,null],[12,"hash","bdk::descriptor::policy::SatisfiableItem","",28,null],[13,"HASH256Preimage","bdk::descriptor::policy","",27,null],[12,"hash","bdk::descriptor::policy::SatisfiableItem","",29,null],[13,"RIPEMD160Preimage","bdk::descriptor::policy","",27,null],[12,"hash","bdk::descriptor::policy::SatisfiableItem","",30,null],[13,"HASH160Preimage","bdk::descriptor::policy","",27,null],[12,"hash","bdk::descriptor::policy::SatisfiableItem","",31,null],[13,"AbsoluteTimelock","bdk::descriptor::policy","",27,null],[12,"value","bdk::descriptor::policy::SatisfiableItem","",32,null],[13,"RelativeTimelock","bdk::descriptor::policy","",27,null],[12,"value","bdk::descriptor::policy::SatisfiableItem","",33,null],[13,"Thresh","bdk::descriptor::policy","",27,null],[12,"items","bdk::descriptor::policy::SatisfiableItem","",34,null],[12,"threshold","","",34,null],[13,"Multisig","bdk::descriptor::policy","",27,null],[12,"keys","bdk::descriptor::policy::SatisfiableItem","",35,null],[12,"threshold","","",35,null],[4,"Satisfaction","bdk::descriptor::policy","Represent if and how much a policy item is satisfied by…",null,null],[13,"Partial","","Only a partial satisfaction of some kind of threshold policy",36,null],[12,"n","bdk::descriptor::policy::Satisfaction","Total number of items",37,null],[12,"m","","Threshold",37,null],[12,"items","","The items that can be satisfied by the descriptor",37,null],[12,"conditions","","Extra conditions that also need to be satisfied",37,null],[13,"PartialComplete","bdk::descriptor::policy","Can reach the threshold of some kind of threshold policy",36,null],[12,"n","bdk::descriptor::policy::Satisfaction","Total number of items",38,null],[12,"m","","Threshold",38,null],[12,"items","","The items that can be satisfied by the descriptor",38,null],[12,"conditions","","Extra conditions that also need to be satisfied",38,null],[13,"Complete","bdk::descriptor::policy","Can satisfy the policy item",36,null],[12,"condition","bdk::descriptor::policy::Satisfaction","Extra conditions that also need to be satisfied",39,null],[13,"None","bdk::descriptor::policy","Cannot satisfy or contribute to the policy item",36,null],[4,"PolicyError","","Errors that can happen while extracting and manipulating…",null,null],[13,"NotEnoughItemsSelected","","",40,null],[13,"TooManyItemsSelected","","",40,null],[13,"IndexOutOfRange","","",40,null],[13,"AddOnLeaf","","",40,null],[13,"AddOnPartialComplete","","",40,null],[13,"MixedTimelockUnits","","",40,null],[13,"IncompatibleConditions","","",40,null],[6,"ConditionMap","","",null,null],[6,"FoldedConditionMap","","",null,null],[11,"is_leaf","","",27,[[]]],[11,"id","","",27,[[],["string",3]]],[11,"is_leaf","","",36,[[]]],[11,"is_null","","",26,[[]]],[11,"requires_path","","Return whether or not a specific path in the policy tree…",25,[[]]],[11,"get_condition","","Return the conditions that are set by the spending policy…",25,[[["btreemap",3]],[["policyerror",4],["result",4],["condition",3]]]],[6,"ExtendedDescriptor","bdk::descriptor","Alias for a [`Descriptor`] that can contain extended keys…",null,null],[6,"HDKeyPaths","","Alias for the type of maps that represent derivation paths…",null,null],[8,"ExtractPolicy","","Trait implemented on [`Descriptor`]s to add a method to…",null,null],[10,"extract_policy","","",41,[[["signerscontainer",3],["arc",3]],[["error",4],["option",4],["result",4]]]],[11,"as_byte","bdk","",4,[[]]],[11,"is_internal","","",4,[[]]],[11,"from_btc_per_kvb","","Create a new instance of [`FeeRate`] given a float fee…",42,[[]]],[11,"from_sat_per_vb","","Create a new instance of [`FeeRate`] given a float fee…",42,[[]]],[11,"default_min_relay_fee","","Create a new [`FeeRate`] with the default min relay fee…",42,[[]]],[11,"as_sat_vb","","Return the value as satoshi/vbyte",42,[[]]],[0,"wallet","","Wallet",null,null],[3,"Wallet","bdk::wallet","A Bitcoin wallet",null,null],[0,"address_validator","","Address validation callbacks",null,null],[4,"AddressValidatorError","bdk::wallet::address_validator","Errors that can be returned to fail the validation of an…",null,null],[13,"UserRejected","","",43,null],[13,"ConnectionError","","",43,null],[13,"TimeoutError","","",43,null],[13,"InvalidScript","","",43,null],[13,"Message","","",43,null],[8,"AddressValidator","","Trait to build address validators",null,null],[10,"validate","","Validate or inspect an address",44,[[["scripttype",4],["script",3],["hdkeypaths",6]],[["result",4],["addressvalidatorerror",4]]]],[0,"coin_selection","bdk::wallet","Coin selection",null,null],[3,"CoinSelectionResult","bdk::wallet::coin_selection","Result of a successful coin selection",null,null],[12,"txin","","List of inputs to use, with the respective previous…",45,null],[12,"selected_amount","","Sum of the selected inputs\' value",45,null],[12,"fee_amount","","Total fee amount in satoshi",45,null],[3,"DumbCoinSelection","","Simple and dumb coin selection",null,null],[6,"DefaultCoinSelectionAlgorithm","","Default coin selection algorithm used by `TxBuilder` if…",null,null],[8,"CoinSelectionAlgorithm","","Trait for generalized coin selection algorithms",null,null],[10,"coin_select","","Perform the coin selection",46,[[["vec",3],["feerate",3],["utxo",3]],[["error",4],["result",4],["coinselectionresult",3]]]],[0,"export","bdk::wallet","Wallet export",null,null],[3,"WalletExport","bdk::wallet::export","Structure that contains the export of a wallet",null,null],[12,"blockheight","","Earliest block to rescan when looking for the wallet\'s…",47,null],[12,"label","","Arbitrary label for the wallet",47,null],[11,"export_wallet","","Export a wallet",47,[[["wallet",3]],["result",4]]],[11,"descriptor","","Return the external descriptor",47,[[],["string",3]]],[11,"change_descriptor","","Return the internal descriptor, if present",47,[[],[["string",3],["option",4]]]],[0,"signer","bdk::wallet","Generalized signers",null,null],[3,"SignerOrdering","bdk::wallet::signer","Defines the order in which signers are called",null,null],[12,"0","","",48,null],[3,"SignersContainer","","Container for multiple signers",null,null],[4,"SignerId","","Identifier of a signer in the `SignersContainers`. Used as…",null,null],[13,"PkHash","","",49,null],[13,"Fingerprint","","",49,null],[4,"SignerError","","Signing error",null,null],[13,"MissingKey","","The private key is missing for the required public key",50,null],[13,"UserCanceled","","The user canceled the operation",50,null],[13,"MissingSighash","","The sighash is missing in the PSBT input",50,null],[13,"InputIndexOutOfRange","","Input index is out of range",50,null],[13,"MissingNonWitnessUtxo","","The `non_witness_utxo` field of the transaction is…",50,null],[13,"InvalidNonWitnessUtxo","","The `non_witness_utxo` specified is invalid",50,null],[13,"MissingWitnessUtxo","","The `witness_utxo` field of the transaction is required to…",50,null],[13,"MissingWitnessScript","","The `witness_script` field of the transaction is requied…",50,null],[13,"MissingHDKeypath","","The fingerprint and derivation path are missing from the…",50,null],[8,"Signer","","Trait for signers",null,null],[10,"sign","","Sign a PSBT",51,[[["partiallysignedtransaction",3],["option",4]],[["result",4],["signererror",4]]]],[10,"sign_whole_tx","","Return whether or not the signer signs the whole…",51,[[]]],[11,"descriptor_secret_key","","Return the secret key for the signer",51,[[],[["option",4],["descriptorsecretkey",4]]]],[11,"as_key_map","","",52,[[],["keymap",6]]],[11,"new","","Default constructor",52,[[]]],[11,"add_external","","Adds an external signer to the container for the specified…",52,[[["signerid",4],["signerordering",3],["arc",3],["box",3]],[["arc",3],["option",4]]]],[11,"remove","","Removes a signer from the container and returns it",52,[[["signerid",4],["signerordering",3]],[["arc",3],["option",4]]]],[11,"ids","","Returns the list of identifiers of all the signers in the…",52,[[],[["vec",3],["signerid",4]]]],[11,"signers","","Returns the list of signers in the container, sorted by…",52,[[],[["arc",3],["vec",3]]]],[11,"find","","Finds the signer with lowest ordering for a given id in…",52,[[["signerid",4]],[["arc",3],["option",4]]]],[0,"time","bdk::wallet","Cross-platform time",null,null],[5,"get_timestamp","bdk::wallet::time","Return the current timestamp in seconds",null,[[]]],[0,"tx_builder","bdk::wallet","Transaction builder",null,null],[3,"TxBuilder","bdk::wallet::tx_builder","A transaction builder",null,null],[4,"TxOrdering","","Ordering of the transaction\'s inputs and outputs",null,null],[13,"Shuffle","","Randomized (default)",53,null],[13,"Untouched","","Unchanged",53,null],[13,"BIP69Lexicographic","","BIP69 / Lexicographic",53,null],[4,"ChangeSpendPolicy","","Policy regarding the use of change outputs when creating a…",null,null],[13,"ChangeAllowed","","Use both change and non-change outputs (default)",54,null],[13,"OnlyChange","","Only use change outputs (see…",54,null],[13,"ChangeForbidden","","Only use non-change outputs (see…",54,null],[11,"new","","Create an empty builder",55,[[]]],[11,"with_recipients","","Create a builder starting from a list of recipients",55,[[["vec",3]]]],[11,"set_recipients","","Replace the recipients already added with a new list",55,[[["vec",3]]]],[11,"add_recipient","","Add a recipient to the internal list",55,[[["script",3]]]],[11,"send_all","","Send all the selected utxos to a single output",55,[[]]],[11,"fee_rate","","Set a custom fee rate",55,[[["feerate",3]]]],[11,"policy_path","","Set the policy path to use while creating the transaction",55,[[["btreemap",3],["vec",3],["string",3]]]],[11,"utxos","","Replace the internal list of utxos that must be spent with…",55,[[["outpoint",3],["vec",3]]]],[11,"add_utxo","","Add a utxo to the internal list of utxos that must be spent",55,[[["outpoint",3]]]],[11,"unspendable","","Replace the internal list of unspendable utxos with a new…",55,[[["outpoint",3],["vec",3]]]],[11,"add_unspendable","","Add a utxo to the internal list of unspendable utxos",55,[[["outpoint",3]]]],[11,"sighash","","Sign with a specific sig hash",55,[[["sighashtype",4]]]],[11,"ordering","","Choose the ordering for inputs and outputs of the…",55,[[["txordering",4]]]],[11,"nlocktime","","Use a specific nLockTime while creating the transaction",55,[[]]],[11,"enable_rbf","","Enable signaling RBF",55,[[]]],[11,"enable_rbf_with_sequence","","Enable signaling RBF with a specific nSequence value",55,[[]]],[11,"version","","Build a transaction with a specific version",55,[[]]],[11,"do_not_spend_change","","Do not spend change outputs",55,[[]]],[11,"only_spend_change","","Only spend change outputs",55,[[]]],[11,"change_policy","","Set a specific [`ChangeSpendPolicy`]. See…",55,[[["changespendpolicy",4]]]],[11,"force_non_witness_utxo","","Fill-in the `psbt::Input::non_witness_utxo` field even if…",55,[[]]],[11,"coin_selection","","Choose the coin selection algorithm",55,[[["coinselectionalgorithm",8]],[["txbuilder",3],["coinselectionalgorithm",8]]]],[11,"sort_tx","","",53,[[["transaction",3]]]],[6,"OfflineWallet","bdk::wallet","Type alias for a [`Wallet`] that uses [`OfflineBlockchain`]",null,null],[8,"IsDust","","Trait to check if a value is below the dust limit",null,null],[10,"is_dust","","Check whether or not a value is below dust limit",56,[[]]],[11,"new_offline","","Create a new \\\"offline\\\" wallet",57,[[["option",4],["network",4]],[["result",4],["error",4]]]],[11,"get_new_address","","Return a newly generated address using the external…",57,[[],[["address",3],["result",4],["error",4]]]],[11,"is_mine","","Return whether or not a `script` is part of this wallet…",57,[[["script",3]],[["error",4],["result",4]]]],[11,"list_unspent","","Return the list of unspent outputs of this wallet",57,[[],[["vec",3],["result",4],["error",4]]]],[11,"list_transactions","","Return the list of transactions made and received by the…",57,[[],[["result",4],["vec",3],["error",4]]]],[11,"get_balance","","Return the balance, meaning the sum of this wallet\'s…",57,[[],[["error",4],["result",4]]]],[11,"add_signer","","Add an external signer",57,[[["scripttype",4],["signerid",4],["signerordering",3],["descriptorpublickey",4],["arc",3],["box",3]]]],[11,"add_address_validator","","Add an address validator",57,[[["arc",3],["box",3]]]],[11,"create_tx","","Create a new transaction following the options specified…",57,[[["txbuilder",3],["coinselectionalgorithm",8]],[["result",4],["error",4]]]],[11,"bump_fee","","Bump the fee of a transaction following the options…",57,[[["txid",3],["txbuilder",3],["coinselectionalgorithm",8]],[["result",4],["error",4]]]],[11,"sign","","Sign a transaction with all the wallet\'s signers, in the…",57,[[["psbt",3],["option",4]],[["error",4],["result",4]]]],[11,"policies","","Return the spending policies for the wallet\'s descriptor",57,[[["scripttype",4]],[["result",4],["option",4],["error",4]]]],[11,"public_descriptor","","Return the \\\"public\\\" version of the wallet\'s descriptor,…",57,[[["scripttype",4]],[["error",4],["option",4],["result",4]]]],[11,"finalize_psbt","","Try to finalize a PSBT",57,[[["psbt",3],["option",4]],[["error",4],["result",4]]]],[11,"new","","Create a new \\\"online\\\" wallet",57,[[["option",4],["network",4]],[["result",4],["error",4]]]],[11,"sync","","Sync the internal database with the blockchain",57,[[["progress",8],["option",4]],[["result",4],["error",4]]]],[11,"client","","Return a reference to the internal blockchain client",57,[[],["option",4]]],[11,"broadcast","","Broadcast a transaction to the network",57,[[["transaction",3]],[["result",4],["txid",3],["error",4]]]],[11,"from","bdk","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"equivalent","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"equivalent","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"write_base32","","",4,[[],["result",4]]],[11,"base32_len","","",4,[[]]],[11,"check_base32","","",4,[[],[["result",4],["vec",3]]]],[11,"equivalent","","",4,[[]]],[11,"vzip","","",4,[[]]],[11,"from","bdk::blockchain","",58,[[]]],[11,"into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"equivalent","","",5,[[]]],[11,"vzip","","",5,[[]]],[11,"from","bdk::blockchain::electrum","",61,[[]]],[11,"into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"from","bdk::blockchain::esplora","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","bdk::blockchain::compact_filters","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","bdk::database::memory","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","bdk::descriptor","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"equivalent","","",18,[[]]],[11,"vzip","","",18,[[]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"equivalent","","",62,[[]]],[11,"vzip","","",62,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"equivalent","","",19,[[]]],[11,"vzip","","",19,[[]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"equivalent","","",63,[[]]],[11,"vzip","","",63,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"equivalent","","",22,[[]]],[11,"vzip","","",22,[[]]],[11,"from","bdk::descriptor::error","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"from","bdk::descriptor::policy","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"equivalent","","",26,[[]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"vzip","","",36,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_string","","",40,[[],["string",3]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"vzip","","",40,[[]]],[11,"from","bdk::wallet","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"from","bdk::wallet::address_validator","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"to_string","","",43,[[],["string",3]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"equivalent","","",43,[[]]],[11,"vzip","","",43,[[]]],[11,"from","bdk::wallet::coin_selection","",45,[[]]],[11,"into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"from","bdk::wallet::export","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_string","","",47,[[],["string",3]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"from","bdk::wallet::signer","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"equivalent","","",48,[[]]],[11,"vzip","","",48,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"equivalent","","",49,[[]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"to_string","","",50,[[],["string",3]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"equivalent","","",50,[[]]],[11,"vzip","","",50,[[]]],[11,"from","bdk::wallet::tx_builder","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"equivalent","","",53,[[]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"equivalent","","",54,[[]]],[11,"vzip","","",54,[[]]],[11,"partial_cmp","bdk::descriptor","",22,[[["terminal",4]],[["option",4],["ordering",4]]]],[11,"lt","","",22,[[["terminal",4]]]],[11,"le","","",22,[[["terminal",4]]]],[11,"gt","","",22,[[["terminal",4]]]],[11,"ge","","",22,[[["terminal",4]]]],[11,"partial_cmp","","",62,[[["legacy",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",18,[[["descriptor",4]],[["option",4],["ordering",4]]]],[11,"lt","","",18,[[["descriptor",4]]]],[11,"le","","",18,[[["descriptor",4]]]],[11,"gt","","",18,[[["descriptor",4]]]],[11,"ge","","",18,[[["descriptor",4]]]],[11,"partial_cmp","","",63,[[["segwitv0",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",19,[[["miniscript",3]],[["option",4],["ordering",4]]]],[11,"fmt","","",63,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",19,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",62,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",19,[[]]],[11,"hash","","",22,[[]]],[11,"cmp","","",62,[[["legacy",4]],["ordering",4]]],[11,"cmp","","",63,[[["segwitv0",4]],["ordering",4]]],[11,"cmp","","",22,[[["terminal",4]],["ordering",4]]],[11,"cmp","","",19,[[["miniscript",3]],["ordering",4]]],[11,"cmp","","",18,[[["descriptor",4]],["ordering",4]]],[11,"fmt","","",22,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",19,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",18,[[["formatter",3]],[["result",4],["error",3]]]],[11,"check_frag_non_malleable","","",63,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[11,"check_frag_validity","","",63,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[11,"check_frag_non_malleable","","",62,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[11,"check_frag_validity","","",62,[[["terminal",4]],[["scriptcontexterror",4],["result",4]]]],[11,"clone","","",19,[[],["miniscript",3]]],[11,"clone","","",22,[[],["terminal",4]]],[11,"clone","","",63,[[],["segwitv0",4]]],[11,"clone","","",18,[[],["descriptor",4]]],[11,"clone","","",62,[[],["legacy",4]]],[11,"eq","","",62,[[["legacy",4]]]],[11,"eq","","",22,[[["terminal",4]]]],[11,"ne","","",22,[[["terminal",4]]]],[11,"eq","","",63,[[["segwitv0",4]]]],[11,"eq","","",19,[[["miniscript",3]]]],[11,"eq","","",18,[[["descriptor",4]]]],[11,"ne","","",18,[[["descriptor",4]]]],[11,"from_str","","",19,[[],[["result",4],["error",4],["miniscript",3]]]],[11,"from_str","","",18,[[],[["error",4],["descriptor",4],["result",4]]]],[11,"from_tree","","Parse an expression tree into a Miniscript. As a general…",19,[[["tree",3]],[["result",4],["error",4],["miniscript",3]]]],[11,"from_tree","","",22,[[["tree",3]],[["error",4],["result",4],["terminal",4]]]],[11,"from_tree","","Parse an expression tree into a descriptor",18,[[["tree",3]],[["error",4],["descriptor",4],["result",4]]]],[11,"lift","","",18,[[],["policy",4]]],[11,"lift","","",19,[[],["policy",4]]],[11,"lift","","",22,[[],["policy",4]]],[11,"update","bdk::blockchain","",59,[[["string",3],["option",4]],[["result",4],["error",4]]]],[11,"update","","",60,[[["string",3],["option",4]],[["result",4],["error",4]]]],[11,"set_script_pubkey","bdk::database::memory","",14,[[["scripttype",4],["script",3]],[["result",4],["error",4]]]],[11,"set_utxo","","",14,[[["utxo",3]],[["result",4],["error",4]]]],[11,"set_raw_tx","","",14,[[["transaction",3]],[["result",4],["error",4]]]],[11,"set_tx","","",14,[[["transactiondetails",3]],[["result",4],["error",4]]]],[11,"set_last_index","","",14,[[["scripttype",4]],[["result",4],["error",4]]]],[11,"del_script_pubkey_from_path","","",14,[[["scripttype",4]],[["option",4],["error",4],["result",4]]]],[11,"del_path_from_script_pubkey","","",14,[[["script",3]],[["error",4],["result",4],["option",4]]]],[11,"del_utxo","","",14,[[["outpoint",3]],[["result",4],["error",4],["option",4]]]],[11,"del_raw_tx","","",14,[[["txid",3]],[["error",4],["result",4],["option",4]]]],[11,"del_tx","","",14,[[["txid",3]],[["result",4],["option",4],["error",4]]]],[11,"del_last_index","","",14,[[["scripttype",4]],[["result",4],["option",4],["error",4]]]],[11,"check_descriptor_checksum","","",14,[[["scripttype",4],["asref",8]],[["result",4],["error",4]]]],[11,"iter_script_pubkeys","","",14,[[["scripttype",4],["option",4]],[["error",4],["vec",3],["result",4]]]],[11,"iter_utxos","","",14,[[],[["vec",3],["result",4],["error",4]]]],[11,"iter_raw_txs","","",14,[[],[["result",4],["vec",3],["error",4]]]],[11,"iter_txs","","",14,[[],[["result",4],["vec",3],["error",4]]]],[11,"get_script_pubkey_from_path","","",14,[[["scripttype",4]],[["option",4],["error",4],["result",4]]]],[11,"get_path_from_script_pubkey","","",14,[[["script",3]],[["error",4],["result",4],["option",4]]]],[11,"get_utxo","","",14,[[["outpoint",3]],[["result",4],["error",4],["option",4]]]],[11,"get_raw_tx","","",14,[[["txid",3]],[["error",4],["result",4],["option",4]]]],[11,"get_tx","","",14,[[["txid",3]],[["result",4],["option",4],["error",4]]]],[11,"get_last_index","","",14,[[["scripttype",4]],[["result",4],["option",4],["error",4]]]],[11,"increment_last_index","","",14,[[["scripttype",4]],[["error",4],["result",4]]]],[11,"begin_batch","","",14,[[]]],[11,"commit_batch","","",14,[[],[["result",4],["error",4]]]],[11,"extract_policy","bdk::descriptor","",19,[[["signerscontainer",3],["arc",3]],[["error",4],["option",4],["result",4]]]],[11,"extract_policy","","",18,[[["signerscontainer",3],["arc",3]],[["error",4],["option",4],["result",4]]]],[11,"coin_select","bdk::wallet::coin_selection","",65,[[["vec",3],["feerate",3],["utxo",3]],[["error",4],["result",4],["coinselectionresult",3]]]],[11,"get_capabilities","bdk::blockchain::electrum","",61,[[],[["hashset",3],["capability",4]]]],[11,"setup","","",61,[[["progress",8],["option",4]],[["result",4],["error",4]]]],[11,"get_tx","","",61,[[["txid",3]],[["error",4],["result",4],["option",4]]]],[11,"broadcast","","",61,[[["transaction",3]],[["result",4],["error",4]]]],[11,"get_height","","",61,[[],[["error",4],["result",4]]]],[11,"estimate_fee","","",61,[[],[["feerate",3],["result",4],["error",4]]]],[11,"get_capabilities","bdk::blockchain::esplora","",7,[[],[["hashset",3],["capability",4]]]],[11,"setup","","",7,[[["progress",8],["option",4]],[["result",4],["error",4]]]],[11,"get_tx","","",7,[[["txid",3]],[["error",4],["result",4],["option",4]]]],[11,"broadcast","","",7,[[["transaction",3]],[["result",4],["error",4]]]],[11,"get_height","","",7,[[],[["error",4],["result",4]]]],[11,"estimate_fee","","",7,[[],[["feerate",3],["result",4],["error",4]]]],[11,"get_capabilities","bdk::blockchain::compact_filters","",11,[[],[["hashset",3],["capability",4]]]],[11,"setup","","",11,[[["progress",8],["option",4]],[["result",4],["error",4]]]],[11,"get_tx","","",11,[[["txid",3]],[["error",4],["result",4],["option",4]]]],[11,"broadcast","","",11,[[["transaction",3]],[["result",4],["error",4]]]],[11,"get_height","","",11,[[],[["error",4],["result",4]]]],[11,"estimate_fee","","",11,[[],[["feerate",3],["result",4],["error",4]]]],[11,"as_ref","bdk","",4,[[]]],[11,"from","","",2,[[["error",4]]]],[11,"from","","",2,[[["addressvalidatorerror",4]]]],[11,"from","","",2,[[["policyerror",4]]]],[11,"from","","",2,[[["signererror",4]]]],[11,"from","","",2,[[["error",4]]]],[11,"from","","",2,[[["error",4]]]],[11,"from","","",2,[[["error",4]]]],[11,"from","","",2,[[["error",4]]]],[11,"from","","",2,[[["error",3]]]],[11,"from","","",2,[[["error",4]]]],[11,"from","","",2,[[["error",4]]]],[11,"from","","",2,[[["error",4]]]],[11,"from","","",2,[[["esploraerror",4]]]],[11,"from","","",2,[[["error",4]]]],[11,"from","","",2,[[["compactfilterserror",4]]]],[11,"from","bdk::blockchain::electrum","",61,[[["client",4]]]],[11,"from","bdk::blockchain::esplora","",6,[[["error",3]]]],[11,"from","","",6,[[["parseinterror",3]]]],[11,"from","","",6,[[["error",4]]]],[11,"from","bdk::blockchain::compact_filters","",8,[[["error",3]]]],[11,"from","","",8,[[["error",3]]]],[11,"from","","",8,[[["error",4]]]],[11,"from","","",8,[[["systemtimeerror",3]]]],[11,"from","","",8,[[["error",4]]]],[11,"from","bdk::descriptor::error","",24,[[["error",4]]]],[11,"from","","",24,[[["error",4]]]],[11,"from","","",24,[[["error",4]]]],[11,"from","","",24,[[["error",4]]]],[11,"from","","",24,[[["error",4]]]],[11,"from","","",24,[[["policyerror",4]]]],[11,"from","bdk::descriptor::policy","",36,[[]]],[11,"from","","",25,[[["satisfiableitem",4]]]],[11,"from","bdk::wallet::signer","",49,[[["hash",3]],[["signerid",4],["descriptorpublickey",4]]]],[11,"from","","",49,[[["fingerprint",3]],[["signerid",4],["descriptorpublickey",4]]]],[11,"from","","",52,[[["keymap",6]],[["signerscontainer",3],["descriptorpublickey",4]]]],[11,"clone","bdk::blockchain","",5,[[],["capability",4]]],[11,"clone","","",59,[[],["noopprogress",3]]],[11,"clone","","",60,[[],["logprogress",3]]],[11,"clone","bdk::descriptor::policy","",64,[[],["pkorf",3]]],[11,"clone","","",27,[[],["satisfiableitem",4]]],[11,"clone","","",36,[[],["satisfaction",4]]],[11,"clone","","",25,[[],["policy",3]]],[11,"clone","","",26,[[],["condition",3]]],[11,"clone","bdk","",4,[[],["scripttype",4]]],[11,"clone","","",42,[[],["feerate",3]]],[11,"clone","","",0,[[],["utxo",3]]],[11,"clone","","",1,[[],["transactiondetails",3]]],[11,"clone","bdk::wallet::address_validator","",43,[[],["addressvalidatorerror",4]]],[11,"clone","bdk::wallet::signer","",49,[[],["signerid",4]]],[11,"clone","","",50,[[],["signererror",4]]],[11,"clone","","",48,[[],["signerordering",3]]],[11,"clone","","",52,[[],["signerscontainer",3]]],[11,"clone","bdk::wallet::tx_builder","",53,[[],["txordering",4]]],[11,"clone","","",54,[[],["changespendpolicy",4]]],[11,"default","bdk::blockchain::compact_filters","",9,[[],["mempool",3]]],[11,"default","bdk::database::memory","",14,[[],["memorydatabase",3]]],[11,"default","bdk::descriptor::policy","",64,[[],["pkorf",3]]],[11,"default","","",26,[[],["condition",3]]],[11,"default","bdk","",42,[[]]],[11,"default","","",1,[[],["transactiondetails",3]]],[11,"default","bdk::wallet::coin_selection","",65,[[],["dumbcoinselection",3]]],[11,"default","bdk::wallet::signer","",48,[[]]],[11,"default","","",52,[[],["signerscontainer",3]]],[11,"default","bdk::wallet::tx_builder","",55,[[],["txbuilder",3]]],[11,"default","","",53,[[]]],[11,"default","","",54,[[]]],[11,"cmp","bdk::descriptor::policy","",26,[[["condition",3]],["ordering",4]]],[11,"cmp","bdk::wallet::signer","",48,[[["signerordering",3]],["ordering",4]]],[11,"cmp","bdk::wallet::tx_builder","",53,[[["txordering",4]],["ordering",4]]],[11,"cmp","","",54,[[["changespendpolicy",4]],["ordering",4]]],[11,"eq","bdk::blockchain","",5,[[["capability",4]]]],[11,"eq","bdk::descriptor::policy","",26,[[["condition",3]]]],[11,"ne","","",26,[[["condition",3]]]],[11,"eq","bdk","",4,[[["scripttype",4]]]],[11,"eq","","",42,[[["feerate",3]]]],[11,"ne","","",42,[[["feerate",3]]]],[11,"eq","","",0,[[["utxo",3]]]],[11,"ne","","",0,[[["utxo",3]]]],[11,"eq","","",1,[[["transactiondetails",3]]]],[11,"ne","","",1,[[["transactiondetails",3]]]],[11,"eq","bdk::wallet::address_validator","",43,[[["addressvalidatorerror",4]]]],[11,"ne","","",43,[[["addressvalidatorerror",4]]]],[11,"eq","bdk::wallet::signer","",49,[[["signerid",4]]]],[11,"ne","","",49,[[["signerid",4]]]],[11,"eq","","",50,[[["signererror",4]]]],[11,"eq","","",48,[[["signerordering",3]]]],[11,"ne","","",48,[[["signerordering",3]]]],[11,"eq","bdk::wallet::tx_builder","",53,[[["txordering",4]]]],[11,"eq","","",54,[[["changespendpolicy",4]]]],[11,"partial_cmp","bdk::descriptor::policy","",26,[[["condition",3]],[["option",4],["ordering",4]]]],[11,"lt","","",26,[[["condition",3]]]],[11,"le","","",26,[[["condition",3]]]],[11,"gt","","",26,[[["condition",3]]]],[11,"ge","","",26,[[["condition",3]]]],[11,"partial_cmp","bdk","",42,[[["feerate",3]],[["option",4],["ordering",4]]]],[11,"lt","","",42,[[["feerate",3]]]],[11,"le","","",42,[[["feerate",3]]]],[11,"gt","","",42,[[["feerate",3]]]],[11,"ge","","",42,[[["feerate",3]]]],[11,"partial_cmp","bdk::wallet::signer","",48,[[["signerordering",3]],[["option",4],["ordering",4]]]],[11,"lt","","",48,[[["signerordering",3]]]],[11,"le","","",48,[[["signerordering",3]]]],[11,"gt","","",48,[[["signerordering",3]]]],[11,"ge","","",48,[[["signerordering",3]]]],[11,"partial_cmp","bdk::wallet::tx_builder","",53,[[["txordering",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",54,[[["changespendpolicy",4]],[["option",4],["ordering",4]]]],[11,"to_string","bdk::wallet::export","",47,[[],["string",3]]],[11,"fmt","bdk","",2,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::esplora","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::compact_filters","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain","",5,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::database::memory","",14,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor::error","",24,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor::policy","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","bdk","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::address_validator","",43,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::coin_selection","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::export","",47,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::signer","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::tx_builder","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","bdk","",2,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::esplora","",6,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::blockchain::compact_filters","",8,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor::error","",24,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::descriptor::policy","",40,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::address_validator","",43,[[["formatter",3]],["result",6]]],[11,"fmt","bdk::wallet::signer","",50,[[["formatter",3]],["result",6]]],[11,"hash","bdk::blockchain","",5,[[]]],[11,"hash","bdk::descriptor::policy","",26,[[]]],[11,"hash","bdk","",4,[[]]],[11,"hash","bdk::wallet::signer","",49,[[]]],[11,"hash","bdk::wallet::tx_builder","",53,[[]]],[11,"hash","","",54,[[]]],[11,"from_str","bdk::wallet::export","",47,[[],["result",4]]],[11,"serialize","bdk::descriptor::policy","",64,[[],["result",4]]],[11,"serialize","","",27,[[],["result",4]]],[11,"serialize","","",36,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","bdk","",4,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","bdk::wallet::export","",47,[[],["result",4]]],[11,"deserialize","bdk","",4,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","bdk::wallet::export","",47,[[],["result",4]]],[11,"translate_pk","bdk::descriptor","Convert a descriptor using abstract keys to one using…",18,[[],[["result",4],["descriptor",4]]]],[11,"address","","Computes the Bitcoin address of the descriptor, if one…",18,[[["network",4]],[["option",4],["address",3]]]],[11,"script_pubkey","","Computes the scriptpubkey of the descriptor",18,[[],["script",3]]],[11,"unsigned_script_sig","","Computes the scriptSig that will be in place for an…",18,[[],["script",3]]],[11,"witness_script","","Computes the \\\"witness script\\\" of the descriptor, i.e. the…",18,[[],["script",3]]],[11,"satisfy","","Attempts to produce a satisfying witness and scriptSig to…",18,[[["txin",3]],[["error",4],["result",4]]]],[11,"max_satisfaction_weight","","Computes an upper bound on the weight of a satisfying…",18,[[]]],[11,"derive","","Derives all wildcard keys in the descriptor using the…",18,[[],[["descriptor",4],["descriptorpublickey",4]]]],[11,"parse_secret","","",18,[[],[["result",4],["error",4]]]],[11,"to_string_with_secret","","",18,[[["hashmap",3]],["string",3]]],[11,"from_ast","","Add type information(Type and Extdata) to Miniscript based…",19,[[["terminal",4]],[["result",4],["error",4],["miniscript",3]]]],[11,"into_inner","","Extracts the `AstElem` representing the root of the…",19,[[],["terminal",4]]],[11,"as_inner","","",19,[[],["terminal",4]]],[11,"parse","","Attempt to parse a script into a Miniscript representation",19,[[["script",3]],[["error",4],["miniscript",3],["result",4]]]],[11,"encode","","Encode as a Bitcoin script",19,[[],["script",3]]],[11,"script_size","","Size, in bytes of the script-pubkey. If this Miniscript is…",19,[[]]],[11,"max_satisfaction_witness_elements","","Maximum number of witness elements used to satisfy the…",19,[[]]],[11,"max_satisfaction_size","","Maximum size, in bytes, of a satisfying witness. For…",19,[[]]],[11,"translate_pk","","This will panic if translatefpk returns an uncompressed…",19,[[],[["result",4],["miniscript",3]]]],[11,"satisfy","","Attempt to produce a satisfying witness for the witness…",19,[[],[["option",4],["vec",3]]]],[11,"translate_pk","","Convert an AST element with one public key type to one of…",22,[[],[["result",4],["terminal",4]]]],[11,"encode","","Encode the element as a fragment of Bitcoin Script. The…",22,[[["builder",3]],["builder",3]]],[11,"script_size","","Size, in bytes of the script-pubkey. If this Miniscript is…",22,[[]]],[11,"max_dissatisfaction_witness_elements","","Maximum number of witness elements used to dissatisfy the…",22,[[],["option",4]]],[11,"max_dissatisfaction_size","","Maximum dissatisfaction cost, in bytes, of a Miniscript…",22,[[],["option",4]]],[11,"max_satisfaction_witness_elements","","Maximum number of witness elements used to satisfy the…",22,[[]]],[11,"max_satisfaction_size","","Maximum size, in bytes, of a satisfying witness. For…",22,[[]]]],"p":[[3,"UTXO"],[3,"TransactionDetails"],[4,"Error"],[13,"FeeRateTooLow"],[4,"ScriptType"],[4,"Capability"],[4,"EsploraError"],[3,"EsploraBlockchain"],[4,"CompactFiltersError"],[3,"Mempool"],[3,"Peer"],[3,"CompactFiltersBlockchain"],[8,"Blockchain"],[8,"Progress"],[3,"MemoryDatabase"],[8,"BatchOperations"],[8,"Database"],[8,"BatchDatabase"],[4,"Descriptor"],[3,"Miniscript"],[8,"MiniscriptKey"],[8,"ScriptContext"],[4,"Terminal"],[8,"ToPublicKey"],[4,"Error"],[3,"Policy"],[3,"Condition"],[4,"SatisfiableItem"],[13,"SHA256Preimage"],[13,"HASH256Preimage"],[13,"RIPEMD160Preimage"],[13,"HASH160Preimage"],[13,"AbsoluteTimelock"],[13,"RelativeTimelock"],[13,"Thresh"],[13,"Multisig"],[4,"Satisfaction"],[13,"Partial"],[13,"PartialComplete"],[13,"Complete"],[4,"PolicyError"],[8,"ExtractPolicy"],[3,"FeeRate"],[4,"AddressValidatorError"],[8,"AddressValidator"],[3,"CoinSelectionResult"],[8,"CoinSelectionAlgorithm"],[3,"WalletExport"],[3,"SignerOrdering"],[4,"SignerId"],[4,"SignerError"],[8,"Signer"],[3,"SignersContainer"],[4,"TxOrdering"],[4,"ChangeSpendPolicy"],[3,"TxBuilder"],[8,"IsDust"],[3,"Wallet"],[3,"OfflineBlockchain"],[3,"NoopProgress"],[3,"LogProgress"],[3,"ElectrumBlockchain"],[4,"Legacy"],[4,"Segwitv0"],[3,"PKOrF"],[3,"DumbCoinSelection"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);